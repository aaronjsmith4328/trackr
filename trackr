#!/usr/bin/python3

# Trackr -- Keeps track of deadlines (by breaking down daily progress goals) using excel and should create helpful metrics

### imports ###

import sys, os, openpyxl
from optparse import OptionParser

### get options ###

message = "\n%prog [options]\n\nDescription: Keeps track of deadlines (by breaking down daily progress goals) using excel and should create helpful metrics"

parser = OptionParser(usage=message)

parser.add_option("-x", "--excel", dest="filename",
        help="(required)Excel File used to save data to", metavar="EXCEL_FILE", default=0)

parser.add_option("-g", "--goal", dest="goal",
        help="(required)Final goal needing to be acheived", metavar="NUMBER", default=0)

parser.add_option("-p", "--project", dest="project_name",
        help="(required)Name of project", metavar="PROJECT_NAME", default=0)

parser.add_option("-u", "--unit", dest="unit",
        help="(required)Unit of goal being measured", metavar="UNIT", default=0)

parser.add_option("-d", "--end_date", dest="end_date",
        help="(required)Date in which goal is to be completed format MM-DD-YYYY", metavar="DATE", default=0)

parser.add_option("-w", "--days_per_week", dest="days_per_week",
        help="(required)Days per week working on the project", metavar="DAYS_PER_WEEK", default=0)

(options, args) = parser.parse_args()

### init ###

def init():
    global filename 
    filename = options.filename
    global goal 
    goal = options.goal
    global project_name 
    project_name = options.project_name
    global unit 
    unit = options.unit
    global end_date 
    end_date = options.end_date
    global days_per_week 
    days_per_week = options.days_per_week
    print("\n Processed Options:\n")
    print("days per week ==> %s " % str(days_per_week))
    print("filename ==> %s" % str(filename))
    print("goal ==> %s" % str(goal))
    print("project name ==> %s" % str(project_name))
    print("unit ==> %s" % str(unit))
    print("end date ==> %s" % str(end_date))
    print("\n")

### workbook setup ###

def save_workbook():
    global wb
    global xlpath
    wb.save(xlpath)

def excel_init(xlpath):
    global wb # creating the workbook to be used by the rest of the program
    try:
        wb = openpyxl.load_workbook(filename = xlpath)
        print("Found %s! \nOpening existing workbook..." % xlpath)
    except FileNotFoundError:
        print("Workbook %s not found! \nCreating new workbook..." % xlpath)
        wb = openpyxl.Workbook()
        wb.save(xlpath)
        save_workbook()
        print("Workbook created and saved!")

def project_worksheet(project_name):
    global ws # creating the worksheet to be used by the rest of the program
    for sheet in wb:
        if project_name == sheet.title:
            print("ERROR: Project name already used!")
            exit() # the alternative is to name it something different
    ws = wb.create_sheet(project_name)
    print("Adding Project %s worksheet to the workbook..." % project_name)
    save_workbook()

### data entry ###

def populate_worksheet():
    print("Populating project worksheet...")
    ws.cell(row=1, column=1, value="Sunday")
    ws.cell(row=1, column=2, value="Monday")
    ws.cell(row=1, column=3, value="Tuesday")
    ws.cell(row=1, column=4, value="Wednesday")
    ws.cell(row=1, column=5, value="Thursday")
    ws.cell(row=1, column=6, value="Friday")
    ws.cell(row=1, column=7, value="Saturday")
    save_workbook()

### main ###

def main():

    init() # Loading args into variables used in rest of program
    
    if (filename == 0) or (goal == 0) or (project_name == 0) or (unit == 0) or (end_date == 0) or (days_per_week == 0):
        print("ERROR: Not all required arguments were given...")
        parser.print_help() # Exit

    print("Recieved all the required arguments!")
    global xlpath
    xlpath = os.popen('pwd').read().rstrip('\n') + "/" + filename
    print("Absolute path to the excel ws ==> %s" % xlpath)

    excel_init(xlpath)

    project_worksheet(project_name)

    populate_worksheet()

main()
